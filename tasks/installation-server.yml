---
- name: Download K3s install script
  become: true
  ansible.builtin.get_url:
    url: https://get.k3s.io/
    timeout: 120
    dest: /usr/local/bin/k3s-install.sh
    owner: root
    group: root
    mode: "0755"

- name: Download K3s binary
  become: true
  ansible.builtin.command:
    cmd: /usr/local/bin/k3s-install.sh
  environment:
    INSTALL_K3S_SKIP_START: "true"
    INSTALL_K3S_VERSION: "{{ k3s_installation_k3s_version }}"
  changed_when: true

- name: Add K3s autocomplete to user bashrc
  ansible.builtin.lineinfile:
    path: "~{{ ansible_user }}/.bashrc"
    regexp: '\.\s+<\(k3s completion bash\)'
    line: ". <(k3s completion bash)  # Added by k3s-ansible"

- name: Setup optional config file
  when: k3s_installation_server_config_yaml is defined
  block:
    - name: Make config directory
      ansible.builtin.file:
        path: "/etc/rancher/k3s"
        mode: "0755"
        state: directory
    - name: Copy config values
      ansible.builtin.copy:
        content: "{{ k3s_installation_server_config_yaml }}"
        dest: "/etc/rancher/k3s/config.yaml"
        mode: "0644"

- name: Setup optional registry mirrors
  when: k3s_installation_registry_mirrors is defined and (k3s_installation_registry_mirrors | length > 0)
  block:
    - name: Make config directory
      ansible.builtin.file:
        path: "/etc/rancher/k3s"
        mode: "0755"
        state: directory

    - name: Add custom registry template
      ansible.builtin.template:
        src: "k3s-registries.yaml.j2"
        dest: "/etc/rancher/k3s/registries.yaml"
        owner: root
        group: root
        mode: "0644"
      notify: Restart k3s server

- name: Init first server node
  when: inventory_hostname == groups['server'][0]
  become: true
  block:
    - name: Copy K3s service file [Single]
      when: groups['server'] | length == 1
      ansible.builtin.template:
        src: "k3s-single.service.j2"
        dest: "{{ k3s_installation_systemd_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0644"

    - name: Copy K3s service file [HA]
      when: groups['server'] | length > 1
      ansible.builtin.template:
        src: "k3s-cluster-init.service.j2"
        dest: "{{ k3s_installation_systemd_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0644"

    - name: Add service environment variables
      when: extra_service_envs is defined
      ansible.builtin.lineinfile:
        path: "{{ k3s_installation_systemd_dir }}/k3s.service.env"
        line: "{{ item }}"
      with_items: "{{ k3s_installation_extra_service_envs }}"

    - name: Enable and check K3s service
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: started
        enabled: true
      ignore_errors: "{{ ansible_check_mode }}"

    - name: Pause to allow first server startup
      when: (groups['server'] | length) > 1 and not ansible_check_mode
      ansible.builtin.pause:
        seconds: 10

    - name: Check whether kubectl is installed on control node
      ansible.builtin.command: "kubectl"
      register: kubectl_installed
      ignore_errors: true
      delegate_to: localhost
      become: false
      changed_when: false

    - name: Apply K3S kubeconfig to control node
      when: kubectl_installed.rc == 0 and not ansible_check_mode
      block:
        - name: Copy kubeconfig to control node
          ansible.builtin.fetch:
            src: /etc/rancher/k3s/k3s.yaml
            dest: "{{ k3s_installation_kubeconfig }}"
            flat: true

        - name: Change server address in kubeconfig on control node
          ansible.builtin.shell: |
            KUBECONFIG={{ k3s_installation_kubeconfig }} kubectl config set-cluster default --server=https://{{ k3s_installation_api_endpoint }}:{{ k3s_installation_api_port }}
          delegate_to: localhost
          become: false
          register: csa_result
          changed_when:
            - csa_result.rc == 0

        - name: Setup kubeconfig k3s-ansible context on control node
          when: k3s_installation_kubeconfig != "~/.kube/config"
          ansible.builtin.replace:
            path: "{{ k3s_installation_kubeconfig }}"
            regexp: "name: default"
            replace: "name: k3s-ansible"
          delegate_to: localhost
          become: false

        - name: Merge with any existing kubeconfig on control node
          when: k3s_installation_kubeconfig != "~/.kube/config"
          ansible.builtin.shell: |
            TFILE=$(mktemp)
            KUBECONFIG={{ k3s_installation_kubeconfig }} kubectl config set-context k3s-ansible --user=k3s-ansible --cluster=k3s-ansible
            KUBECONFIG={{ k3s_installation_kubeconfig }}:~/.kube/config kubectl config view --flatten > ${TFILE}
            mv ${TFILE} ~/.kube/config
            rm {{ k3s_installation_kubeconfig }}
          delegate_to: localhost
          become: false
          register: mv_result
          changed_when:
            - mv_result.rc == 0

- name: Start other server if any and verify status
  when:
    - (groups['server'] | length) > 1
    - inventory_hostname != groups['server'][0]
  become: true
  block:
    - name: Copy K3s service file [HA]
      when: groups['server'] | length > 1
      ansible.builtin.template:
        src: "k3s-ha.service.j2"
        dest: "{{ k3s_installation_systemd_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0644"

    - name: Enable and check K3s service
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: started
        enabled: true
      ignore_errors: "{{ ansible_check_mode }}"

    - name: Verify that all server nodes joined
      when: (groups['server'] | length) > 1 and not ansible_check_mode
      ansible.builtin.command:
        cmd: >
          k3s kubectl get nodes -l "node-role.kubernetes.io/control-plane=true" -o=jsonpath="{.items[*].metadata.name}"
      register: nodes
      until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups['server'] | length)
      retries: 20
      delay: 10
      changed_when: false

- name: Setup kubectl for user
  when: k3s_installation_user_kubectl and not ansible_check_mode
  block:
    - name: Create kubectl symlink
      when: lookup('fileglob', '/usr/local/bin/kubectl', errors='warn') | length == 0
      ansible.builtin.file:
        src: /usr/local/bin/k3s
        dest: /usr/local/bin/kubectl
        state: link

    - name: Create directory .kube
      ansible.builtin.file:
        path: ~{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        mode: "u=rwx,g=rx,o="

    - name: Copy config file to user home directory
      ansible.builtin.copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: ~{{ ansible_user }}/.kube/config
        remote_src: true
        owner: "{{ ansible_user }}"
        mode: "0755"
      become: true

    - name: Configure default KUBECONFIG for user
      ansible.builtin.lineinfile:
        path: ~{{ ansible_user }}/.bashrc
        regexp: "export KUBECONFIG=~/.kube/config"
        line: "export KUBECONFIG=~/.kube/config # Added by k3s-ansible"
        state: present

    - name: Configure kubectl autocomplete
      ansible.builtin.lineinfile:
        path: ~{{ ansible_user }}/.bashrc
        regexp: '\.\s+<\(kubectl completion bash\)'
        line: ". <(kubectl completion bash)  # Added by k3s-ansible"
